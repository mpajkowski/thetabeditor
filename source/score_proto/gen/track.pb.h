// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: track.proto

#ifndef PROTOBUF_INCLUDED_track_2eproto
#define PROTOBUF_INCLUDED_track_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tuning.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_track_2eproto 

namespace protobuf_track_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_track_2eproto
namespace score_proto {
class Track;
class TrackDefaultTypeInternal;
extern TrackDefaultTypeInternal _Track_default_instance_;
}  // namespace score_proto
namespace google {
namespace protobuf {
template<> ::score_proto::Track* Arena::CreateMaybeMessage<::score_proto::Track>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace score_proto {

// ===================================================================

class Track : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:score_proto.Track) */ {
 public:
  Track();
  virtual ~Track();

  Track(const Track& from);

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Track(Track&& from) noexcept
    : Track() {
    *this = ::std::move(from);
  }

  inline Track& operator=(Track&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Track& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Track* internal_default_instance() {
    return reinterpret_cast<const Track*>(
               &_Track_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Track* other);
  friend void swap(Track& a, Track& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Track* New() const final {
    return CreateMaybeMessage<Track>(NULL);
  }

  Track* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Track>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Track* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .score_proto.Tuning tuning = 5;
  bool has_tuning() const;
  void clear_tuning();
  static const int kTuningFieldNumber = 5;
  private:
  const ::score_proto::Tuning& _internal_tuning() const;
  public:
  const ::score_proto::Tuning& tuning() const;
  ::score_proto::Tuning* release_tuning();
  ::score_proto::Tuning* mutable_tuning();
  void set_allocated_tuning(::score_proto::Tuning* tuning);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // uint32 maxVolume = 3;
  void clear_maxvolume();
  static const int kMaxVolumeFieldNumber = 3;
  ::google::protobuf::uint32 maxvolume() const;
  void set_maxvolume(::google::protobuf::uint32 value);

  // uint32 pan = 4;
  void clear_pan();
  static const int kPanFieldNumber = 4;
  ::google::protobuf::uint32 pan() const;
  void set_pan(::google::protobuf::uint32 value);

  // uint32 midiPreset = 6;
  void clear_midipreset();
  static const int kMidiPresetFieldNumber = 6;
  ::google::protobuf::uint32 midipreset() const;
  void set_midipreset(::google::protobuf::uint32 value);

  // bool isPercussion = 7;
  void clear_ispercussion();
  static const int kIsPercussionFieldNumber = 7;
  bool ispercussion() const;
  void set_ispercussion(bool value);

  // @@protoc_insertion_point(class_scope:score_proto.Track)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::score_proto::Tuning* tuning_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 maxvolume_;
  ::google::protobuf::uint32 pan_;
  ::google::protobuf::uint32 midipreset_;
  bool ispercussion_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_track_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Track

// int32 id = 1;
inline void Track::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Track::id() const {
  // @@protoc_insertion_point(field_get:score_proto.Track.id)
  return id_;
}
inline void Track::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:score_proto.Track.id)
}

// string description = 2;
inline void Track::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Track::description() const {
  // @@protoc_insertion_point(field_get:score_proto.Track.description)
  return description_.GetNoArena();
}
inline void Track::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:score_proto.Track.description)
}
#if LANG_CXX11
inline void Track::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:score_proto.Track.description)
}
#endif
inline void Track::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:score_proto.Track.description)
}
inline void Track::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:score_proto.Track.description)
}
inline ::std::string* Track::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:score_proto.Track.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Track::release_description() {
  // @@protoc_insertion_point(field_release:score_proto.Track.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Track::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:score_proto.Track.description)
}

// uint32 maxVolume = 3;
inline void Track::clear_maxvolume() {
  maxvolume_ = 0u;
}
inline ::google::protobuf::uint32 Track::maxvolume() const {
  // @@protoc_insertion_point(field_get:score_proto.Track.maxVolume)
  return maxvolume_;
}
inline void Track::set_maxvolume(::google::protobuf::uint32 value) {
  
  maxvolume_ = value;
  // @@protoc_insertion_point(field_set:score_proto.Track.maxVolume)
}

// uint32 pan = 4;
inline void Track::clear_pan() {
  pan_ = 0u;
}
inline ::google::protobuf::uint32 Track::pan() const {
  // @@protoc_insertion_point(field_get:score_proto.Track.pan)
  return pan_;
}
inline void Track::set_pan(::google::protobuf::uint32 value) {
  
  pan_ = value;
  // @@protoc_insertion_point(field_set:score_proto.Track.pan)
}

// .score_proto.Tuning tuning = 5;
inline bool Track::has_tuning() const {
  return this != internal_default_instance() && tuning_ != NULL;
}
inline const ::score_proto::Tuning& Track::_internal_tuning() const {
  return *tuning_;
}
inline const ::score_proto::Tuning& Track::tuning() const {
  const ::score_proto::Tuning* p = tuning_;
  // @@protoc_insertion_point(field_get:score_proto.Track.tuning)
  return p != NULL ? *p : *reinterpret_cast<const ::score_proto::Tuning*>(
      &::score_proto::_Tuning_default_instance_);
}
inline ::score_proto::Tuning* Track::release_tuning() {
  // @@protoc_insertion_point(field_release:score_proto.Track.tuning)
  
  ::score_proto::Tuning* temp = tuning_;
  tuning_ = NULL;
  return temp;
}
inline ::score_proto::Tuning* Track::mutable_tuning() {
  
  if (tuning_ == NULL) {
    auto* p = CreateMaybeMessage<::score_proto::Tuning>(GetArenaNoVirtual());
    tuning_ = p;
  }
  // @@protoc_insertion_point(field_mutable:score_proto.Track.tuning)
  return tuning_;
}
inline void Track::set_allocated_tuning(::score_proto::Tuning* tuning) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tuning_);
  }
  if (tuning) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tuning = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tuning, submessage_arena);
    }
    
  } else {
    
  }
  tuning_ = tuning;
  // @@protoc_insertion_point(field_set_allocated:score_proto.Track.tuning)
}

// uint32 midiPreset = 6;
inline void Track::clear_midipreset() {
  midipreset_ = 0u;
}
inline ::google::protobuf::uint32 Track::midipreset() const {
  // @@protoc_insertion_point(field_get:score_proto.Track.midiPreset)
  return midipreset_;
}
inline void Track::set_midipreset(::google::protobuf::uint32 value) {
  
  midipreset_ = value;
  // @@protoc_insertion_point(field_set:score_proto.Track.midiPreset)
}

// bool isPercussion = 7;
inline void Track::clear_ispercussion() {
  ispercussion_ = false;
}
inline bool Track::ispercussion() const {
  // @@protoc_insertion_point(field_get:score_proto.Track.isPercussion)
  return ispercussion_;
}
inline void Track::set_ispercussion(bool value) {
  
  ispercussion_ = value;
  // @@protoc_insertion_point(field_set:score_proto.Track.isPercussion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace score_proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_track_2eproto
