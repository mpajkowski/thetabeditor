// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: track.proto

#include "track.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tuning_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tuning_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tuning;
}  // namespace protobuf_tuning_2eproto
namespace score_proto {
class TrackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Track>
      _instance;
} _Track_default_instance_;
}  // namespace score_proto
namespace protobuf_track_2eproto {
static void InitDefaultsTrack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::score_proto::_Track_default_instance_;
    new (ptr) ::score_proto::Track();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::score_proto::Track::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Track =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrack}, {
      &protobuf_tuning_2eproto::scc_info_Tuning.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Track.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::score_proto::Track, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::score_proto::Track, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::score_proto::Track, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::score_proto::Track, maxvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::score_proto::Track, pan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::score_proto::Track, tuning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::score_proto::Track, midipreset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::score_proto::Track, ispercussion_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::score_proto::Track)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::score_proto::_Track_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "track.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013track.proto\022\013score_proto\032\014tuning.proto"
      "\"\227\001\n\005Track\022\n\n\002id\030\001 \001(\005\022\023\n\013description\030\002 "
      "\001(\t\022\021\n\tmaxVolume\030\003 \001(\r\022\013\n\003pan\030\004 \001(\r\022#\n\006t"
      "uning\030\005 \001(\0132\023.score_proto.Tuning\022\022\n\nmidi"
      "Preset\030\006 \001(\r\022\024\n\014isPercussion\030\007 \001(\010b\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 202);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "track.proto", &protobuf_RegisterTypes);
  ::protobuf_tuning_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_track_2eproto
namespace score_proto {

// ===================================================================

void Track::InitAsDefaultInstance() {
  ::score_proto::_Track_default_instance_._instance.get_mutable()->tuning_ = const_cast< ::score_proto::Tuning*>(
      ::score_proto::Tuning::internal_default_instance());
}
void Track::clear_tuning() {
  if (GetArenaNoVirtual() == NULL && tuning_ != NULL) {
    delete tuning_;
  }
  tuning_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Track::kIdFieldNumber;
const int Track::kDescriptionFieldNumber;
const int Track::kMaxVolumeFieldNumber;
const int Track::kPanFieldNumber;
const int Track::kTuningFieldNumber;
const int Track::kMidiPresetFieldNumber;
const int Track::kIsPercussionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Track::Track()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_track_2eproto::scc_info_Track.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:score_proto.Track)
}
Track::Track(const Track& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_tuning()) {
    tuning_ = new ::score_proto::Tuning(*from.tuning_);
  } else {
    tuning_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ispercussion_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ispercussion_));
  // @@protoc_insertion_point(copy_constructor:score_proto.Track)
}

void Track::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tuning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ispercussion_) -
      reinterpret_cast<char*>(&tuning_)) + sizeof(ispercussion_));
}

Track::~Track() {
  // @@protoc_insertion_point(destructor:score_proto.Track)
  SharedDtor();
}

void Track::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tuning_;
}

void Track::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Track::descriptor() {
  ::protobuf_track_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_track_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Track& Track::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_track_2eproto::scc_info_Track.base);
  return *internal_default_instance();
}


void Track::Clear() {
// @@protoc_insertion_point(message_clear_start:score_proto.Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && tuning_ != NULL) {
    delete tuning_;
  }
  tuning_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ispercussion_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ispercussion_));
  _internal_metadata_.Clear();
}

bool Track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:score_proto.Track)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "score_proto.Track.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 maxVolume = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pan = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .score_proto.Tuning tuning = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tuning()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 midiPreset = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &midipreset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isPercussion = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispercussion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:score_proto.Track)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:score_proto.Track)
  return false;
#undef DO_
}

void Track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:score_proto.Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "score_proto.Track.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // uint32 maxVolume = 3;
  if (this->maxvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxvolume(), output);
  }

  // uint32 pan = 4;
  if (this->pan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pan(), output);
  }

  // .score_proto.Tuning tuning = 5;
  if (this->has_tuning()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_tuning(), output);
  }

  // uint32 midiPreset = 6;
  if (this->midipreset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->midipreset(), output);
  }

  // bool isPercussion = 7;
  if (this->ispercussion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ispercussion(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:score_proto.Track)
}

::google::protobuf::uint8* Track::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:score_proto.Track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "score_proto.Track.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // uint32 maxVolume = 3;
  if (this->maxvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxvolume(), target);
  }

  // uint32 pan = 4;
  if (this->pan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pan(), target);
  }

  // .score_proto.Tuning tuning = 5;
  if (this->has_tuning()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_tuning(), deterministic, target);
  }

  // uint32 midiPreset = 6;
  if (this->midipreset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->midipreset(), target);
  }

  // bool isPercussion = 7;
  if (this->ispercussion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ispercussion(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:score_proto.Track)
  return target;
}

size_t Track::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:score_proto.Track)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .score_proto.Tuning tuning = 5;
  if (this->has_tuning()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tuning_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // uint32 maxVolume = 3;
  if (this->maxvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxvolume());
  }

  // uint32 pan = 4;
  if (this->pan() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pan());
  }

  // uint32 midiPreset = 6;
  if (this->midipreset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->midipreset());
  }

  // bool isPercussion = 7;
  if (this->ispercussion() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Track::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:score_proto.Track)
  GOOGLE_DCHECK_NE(&from, this);
  const Track* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Track>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:score_proto.Track)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:score_proto.Track)
    MergeFrom(*source);
  }
}

void Track::MergeFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:score_proto.Track)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_tuning()) {
    mutable_tuning()->::score_proto::Tuning::MergeFrom(from.tuning());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.maxvolume() != 0) {
    set_maxvolume(from.maxvolume());
  }
  if (from.pan() != 0) {
    set_pan(from.pan());
  }
  if (from.midipreset() != 0) {
    set_midipreset(from.midipreset());
  }
  if (from.ispercussion() != 0) {
    set_ispercussion(from.ispercussion());
  }
}

void Track::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:score_proto.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Track::CopyFrom(const Track& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:score_proto.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  return true;
}

void Track::Swap(Track* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Track::InternalSwap(Track* other) {
  using std::swap;
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tuning_, other->tuning_);
  swap(id_, other->id_);
  swap(maxvolume_, other->maxvolume_);
  swap(pan_, other->pan_);
  swap(midipreset_, other->midipreset_);
  swap(ispercussion_, other->ispercussion_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Track::GetMetadata() const {
  protobuf_track_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_track_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace score_proto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::score_proto::Track* Arena::CreateMaybeMessage< ::score_proto::Track >(Arena* arena) {
  return Arena::CreateInternal< ::score_proto::Track >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
